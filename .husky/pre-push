#!/usr/bin/env bash
. "$(dirname "$0")/_/husky.sh"

# Set this to 1 to enable debug output
DEBUG=1

log_debug() {
  if [ "$DEBUG" -eq 1 ]; then
    echo "[DEBUG] $1"
  fi
}

branch=$(git rev-parse --abbrev-ref HEAD)
log_debug "Current branch: $branch"

# ✅ Allowed branch name prefixes (enforced below)
allowed_prefixes_regex="^(feature|bugfix|release|changeset-release)/"

# ❌ Reject branch names that don't follow allowed prefixes
if ! echo "$branch" | grep -Eq "$allowed_prefixes_regex"; then
  echo "🚫 Push rejected: Branch name '$branch' is not allowed."
  echo "✅ Allowed prefixes are: feature/, bugfix/, release/"
  echo "💡 Rename your branch using:"
  echo "    git branch -m new-name"
  exit 1
fi

# 🛡 Skip merge check for main itself
if [ "$branch" = "main" ]; then
  log_debug "Skipping merge check: pushing from 'main'"
  exit 0
fi

# ✅ Step 1: Build list of protected main branches
protected_branches=("main")

tmpfile=$(mktemp)
git for-each-ref --format='%(refname)' refs/remotes/*/main > "$tmpfile"

while IFS= read -r ref; do
  branch_name=$(echo "$ref" | sed 's|refs/remotes/||')
  protected_branches+=("$branch_name")
  log_debug "Found remote branch: $branch_name"
done < "$tmpfile"

rm "$tmpfile"

# ✅ Step 2: Determine range of commits being pushed
upstream_branch=$(git for-each-ref --format='%(upstream:short)' "refs/heads/$branch")
if [ -n "$upstream_branch" ]; then
  commit_range="$upstream_branch..HEAD"
  log_debug "Using upstream range: $commit_range"
else
  commit_range="HEAD"
  log_debug "No upstream. Checking all commits in HEAD."
fi

merge_commits=$(git log "$commit_range" --merges --pretty=%H)

log_debug "Merge commits in range:"
for commit in $merge_commits; do
  log_debug "  - $commit"
done

# ✅ Step 3: Block any merge commits from main branches
for commit in $merge_commits; do
  parents=$(git log -1 --pretty=%P "$commit")
  log_debug "Inspecting merge commit $commit (parents: $parents)"

  for parent in $parents; do
    for protected in "${protected_branches[@]}"; do
      if git merge-base --is-ancestor "$protected" "$parent"; then
        echo "🚫 Push rejected: Merge from '$protected' detected in branch '$branch'."
        echo "💡 Please rebase instead:"
        echo "    git fetch && git rebase $protected"
        exit 1
      fi
    done
  done
done

log_debug "✅ No forbidden merges or branch names detected. Push allowed."
exit 0
